# Generated by Django 2.1 on 2019-10-12 17:21

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from random import choice

songs = [{"artist": "Safri Duo", "title": "Baya Baya"}, {"artist": "London Elektricity", "title": "Elektricity Will Keep Me Warm (SPY Remix)"}, {"artist": "Henry Green", "title": "Electric Feel (Kygo Remix)"},
         {"artist": "Everywhere", "title": "Eddie (Oliver Nelson Remix)"}, {"artist": "Clams Casino", "title": "Drowning"}, {
    "artist": "Fleetwood Mac", "title": "Dreams"}, {"artist": "Hopium", "title": "Dreamers (feat. Phoebe Lou)"},
    {"artist": "Kilimanjaro", "title": "Don't wait (Forthcoming on Dark Clover Records)"}, {"artist": "The Geek x VRV", "title": "Do Me A Favour"}, {
    "artist": "Blank & Jones", "title": "Desire (Ambient Mix)"}, {"artist": "Aerotake", "title": "Departures"},
    {"artist": "De Hofnar", "title": "De Nacht"}, {"artist": "Yppah", "title": "D Song"}, {"artist": "Last Lynx", "title": "Curtains (Embody Remix)"}, {
    "artist": "Pretty Lights", "title": "Country Roads (John Denver Remix)"}, {"artist": "Ess√°y & CoMa", "title": "Deceptive"},
    {"artist": "Lorn", "title": "Diamond"}, {"artist": "Jaymes Young", "title": "Come Back For Me"}, {
        "artist": "Flight Facilities", "title": "Clair De Lune (feat. Christine Hoberg)"}, {"artist": "Lorn", "title": "Cherry Moon"},
    {"artist": "Giorgio Moroder", "title": "Chase"}, {"artist": "Matt Corby",
                                                      "title": "Brother (Audio)"}, {"artist": "Chromatics", "title": "Cherry"},
    {"artist": "Bassnectar", "title": "Butterfly (feat. Mimi Page)"}, {"artist": "Peter, Bjorn & John", "title": "Young Folks"}, {
    "artist": "Hatti Vatti ft. Cian Finn", "title": "You (Phaeleh remix)"},
    {"artist": "Charli XCX", "title": "You (Ha Ha Ha) (Goldroom Remix)"}, {"artist": "Jessie Ware", "title": "You & I Forever (SG Lewis Remix)"}, {
    "artist": "Jonas Rathsman", "title": "Wolfsbane"}, {"artist": "First Aid Kit", "title": "Wolf"},
    {"artist": "Spaze", "title": "Who You Are"}, {"artist": "Override", "title": "White Lights (feat. Kate Schroder)"}, {
    "artist": "Schiller", "title": "Wehmut"}, {"artist": "Formtek, Trilapse, Mostapace", "title": "We Won't Live For Ever"},
    {"artist": "Abakus", "title": "Wasted Feeling (Kobana And Mario Hatchet Remix)"}, {"artist": "I Am The Architect", "title": "Walk In Regret"}]


def seed(apps, schema_editor):

    Song = apps.get_model('playlister', 'Song')
    Playlist = apps.get_model('playlister', 'Playlist')
    PlaylistEntry = apps.get_model('playlister', 'PlaylistEntry')

    db_songs = []
    for i in songs:
        s = Song()
        s.artist = i.get('artist', None)
        s.title = i.get('title', None)
        s.album = 'Uknown'
        s.save()
        db_songs.append(s)

    for i in range(10):
        pl = Playlist()
        pl.name = f'Seeded playlist {i}'
        pl.source = 'USER'
        pl.save()
        for j in range(10):
            pe = PlaylistEntry()
            pe.order = j
            pe.song = choice(db_songs)
            pe.playlist = pl
            pe.save()


def unseed(apps, schema_editor: BaseDatabaseSchemaEditor):
    schema_editor.execute("delete from playlister_song")
    schema_editor.execute("""
    delete from playlister_playlistentry
        where playlist_id in (
            select id from playlister_playlist
            where name like 'Seeded playlist %')
    """)
    schema_editor.execute("""delete from playlister_playlist
                        where name like 'Seeded playlist %'""")


class Migration(migrations.Migration):

    dependencies = [
        ('playlister', '0003_playlistentry_order'),
    ]

    operations = [
        migrations.RunPython(seed, unseed)
    ]
